frontend front
	bind *:80
{% if https_cert_file %}
	bind *:443 ssl crt {{ https_cert_file }} alpn h2,http/1.1
{% endif %}
	mode http
	option httplog

	timeout client 10s
	timeout http-request 30s

	acl certbot path_beg /.well-known/acme-challenge/
	use_backend certbot if certbot

{% for svc in services | sort(attribute="name") %}
  {%- if svc.mode in ("http", "https") %}
	acl {{ svc.fqdn }} hdr(host) -i {{ svc.fqdn }}
    {%- if svc.fqdn_alias %}
	acl {{ svc.fqdn }} hdr(host) -i {{ svc.fqdn_alias }}
    {%- endif %}
	use_backend {{ svc.fqdn }} if {{ svc.fqdn }}
  {%- endif %}
{% endfor %}


backend certbot
	mode http
	option forwardfor
	http-request set-header X-Forwarded-Port %[dst_port]
	http-request add-header X-Forwarded-Proto https if { ssl_fc }

	timeout connect 10s
	timeout server 10s

	server cerbot {{ certbot_url }}


{% for svc in services | sort(attribute="name") %}
backend {{ svc.fqdn }}
  {%- if svc.mode in ("http","https") %}
	mode http
  {%- endif %}

	balance leastconn
	option forwardfor
	http-request set-header X-Forwarded-Port %[dst_port]
	http-request add-header X-Forwarded-Proto https if { ssl_fc }

	timeout connect 10s
	timeout server 10s

  {#- We will make HAProxy deny the request if the response status code from the backend is one of those we need to
     sanitize. But because we don't want HAProxy to return an error but the sanitized value, we will change HAProxy
     default error response (HAProxy sends back a 502 when we ask him to `deny`) to a custom error response (this
     custom error will actually be a blank document with the sanitized value as response code).
     The `http-response deny` trick work only for backend errors, but we also want to catch HAProxy errors, that's why
     we need to add all the `errorfile` directives.

     Note that we could simply use `http-response set-status` be we also want to clean the body and all the headers
     (which we can't do - yet? - with the `http-response` directives). #}

  {%- if svc.http_sanitize_codes %}
	acl sanitize status eq {% for c in svc.http_sanitize_codes | sort %}{{ c }}{{ " " if not loop.last else "" }}{% endfor %}

	# This will return a 502
	http-response deny if sanitize

	# This will catch the 502 generated by HAProxy
	errorfile 502 {{ sanitize_conf_folder }}/{{ svc.fqdn }}-502.html

	# This will catch all the other HAProxy-generated errors (because of the deny) we want to sanitize
    {%- for c in svc.http_sanitize_codes if c != "502" %}
	errorfile {{ c }} {{ sanitize_conf_folder }}/{{ svc.fqdn }}-{{ c }}.html
    {%- endfor %}
  {%- endif %}

  {%- if svc.expose %}
    {%- for (ip, port) in svc.backends | sort(attribute="0") %}
	server server{{ loop.index }} {{ ip }}:{{ port }} check fall 3 inter 1000 rise 1
    {%- endfor %}
  {%- endif %}
{% endfor %}
